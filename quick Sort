#include <stdio.h>

// Function to swap two elements
void swap(int arr[], int a, int b) {
    int temp = arr[a];
    arr[a] = arr[b];
    arr[b] = temp;
}

// Function to partition the array
int partition(int arr[], int low, int high, int *comp) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        (*comp)++; // Increment comparison count
        if (arr[j] < pivot) {
            i++;
            swap(arr, i, j);
        }
    }
    swap(arr, i + 1, high);
    return (i + 1);
}

// Function to perform Quick Sort
void quickSort(int arr[], int low, int high, int *comp) {
    if (low < high) {
        // Partitioning index
        int pi = partition(arr, low, high, comp);

        // Sorting elements before and after partition
        quickSort(arr, low, pi - 1, comp);
        quickSort(arr, pi + 1, high, comp);
    }
}

// Function to print an array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Main function
int main() {
    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    int comp = 0; // Comparison count
    printf("Original array: \n");
    printArray(arr, n);
    quickSort(arr, 0, n - 1, &comp);
    printf("Sorted array: \n");
    printArray(arr, n);
    printf("Number of comparisons: %d\n", comp);
    return 0;
}